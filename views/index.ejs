<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>Hello Tone.js</title>

    <style>
        body, html{
            position:absolute;
            top:0;
            left: 0;
            margin: 0;
            padding: 0;
            background: black;
            width: 100vw;
            height: 100vh;
            overflow: hidden;
            font-size: 0px;
        }
        #content{
            width: 100%;
            height: 100%;
        }
        
        .key {
            float: left;
            position: relative; 
        }

        .white {
            height: 14.4vw;
            width: 4.5vw;
            z-index: 1;
            border-top: 0.12vw solid #AAAAAA;
            border-bottom: 0.12vw solid #AAAAAA;
            border-left: 0.12vw solid #AAAAAA;
            background-color: #CBCBCB;
        }

        .black {
            height: 7.92vw;
            width: 2.0952380952vw;
            z-index: 2;
            border: 0.12vw solid #000000;
            background-color: #222222;
        }

        .a, .b, .d, .e, .g, .black {
            margin: 0 0 0 -1.1676190476vw;
        }

        #keyboard > .note:last-child {
            border-right: 0.12vw solid #AAAAAA;
        }
        #keyboard{
            padding-left: 2vw;
            position: absolute;
            bottom:0;
        }
        #inf{
            font-size: 50px;
            color: white;
            width: 100%;
            height: 50%;
            text-align: center;
            margin-top: 10%;
        }
        #harmony_slide{
            width: 100%;
            height: 5vw;
            background: #AAAAAA;
            bottom: 15vw;
            position:absolute;
        }
        #controls{
            width: 100%;
            height: 5vw;
            background: #AAAAAA;
            bottom: 20.5vw;
            position:absolute;
        }
    </style>
</head>
<body>
    <div id='content'>
        <div id='inf'>
            <span id=notes></span>
        </div>
        <div id='controls'></div>
        <div id="harmony_slide"></div>
        <div id="keyboard">
            <div class="key white c" data-note="C3"></div>
            <div class="key black c_sharp" data-note="C#3"></div>
            <div class="key white d" data-note="D3"></div>
            <div class="key black d_sharp" data-note="D#3"></div>
            <div class="key white e" data-note="E3"></div>
            <div class="key white f" data-note="F3"></div>
            <div class="key black f_sharp" data-note="F#3"></div>
            <div class="key white g" data-note="G3"></div>
            <div class="key black g_sharp" data-note="G#3"></div>
            <div class="key white a" data-note="A3"></div>
            <div class="key black a_sharp" data-note="A#3"></div>
            <div class="key white b" data-note="B3"></div>
            <div class="key white c" data-note="C4"></div>
            <div class="key black c_sharp" data-note="C#4"></div>
            <div class="key white d" data-note="D4"></div>
            <div class="key black d_sharp" data-note="D#4"></div>
            <div class="key white e" data-note="E4"></div>
            <div class="key white f" data-note="F4"></div>
            <div class="key black f_sharp" data-note="F#4"></div>
            <div class="key white g" data-note="G4"></div>
            <div class="key black g_sharp" data-note="G#4"></div>
            <div class="key white a" data-note="A4"></div>
            <div class="key black a_sharp" data-note="A#4"></div>
            <div class="key white b" data-note="B4"></div>
            <div class="key white c" data-note="C5"></div>
            <div class="key black c_sharp" data-note="C#5"></div>
            <div class="key white d" data-note="D5"></div>
            <div class="key black d_sharp" data-note="D#5"></div>
            <div class="key white e" data-note="E5"></div>
            <div class="key white f" data-note="F5"></div>
            <div class="key black f_sharp" data-note="F#5"></div>
            <div class="key white g" data-note="G5"></div>
            <div class="key black g_sharp" data-note="G#5"></div>
            <div class="key white a" data-note="A5"></div>
            <div class="key black a_sharp" data-note="A#5"></div>
            <div class="key white b" data-note="B5"></div>
          </div>
    </div>

    <script src="https://unpkg.com/tone@13.8.25/build/Tone.js"></script> 
    <script>
        // Disable Element Drag, Set MouseState Listeners 
        // (allows drag to affect keyboard @ onmouseover)
        document.documentElement.ondragstart = function(){return(false)}
        var mouse_IsDown = false
        document.documentElement.addEventListener("mousedown", function(){mouse_IsDown = true })
        document.documentElement.addEventListener("mouseup",   function(){mouse_IsDown = false})

        // Initialize Tone.js Synthesizer
        const synth = new Tone.PolySynth({voice: Tone.Synth}).toMaster()
        let notes = [];
        let prev_note;
        let root;

        let conversion = [
            "C3", "C#3", "D3", "D#3", "E3", "F3", "F#3", "G3", "G#3", "A3", "A#3", "B3",
            "C4", "C#4", "D4", "D#4", "E4", "F4", "F#4", "G4", "G#4", "A4", "A#4", "B4",
            "C5", "C#5", "D5", "D#5", "E5", "F5", "F#5", "G5", "G#5", "A5", "A#5", "B5",
            "C6", "C#6", "D6", "D#6", "E6", "F6", "F#6", "G6", "G#6", "A6", "A#6", "B6"
        ];
        harmonies = [
            [4,7,12],   // M
            [4,7,9],    // M6
            [4,7,11],   // M7
            [3,7,12],   // m
        ]

        // Update Key Colors for Pressed/Released States
        function update_KeyColor(key, keyState){
            let key_obj;
            for(let k of keyboard.children){
                if (k.dataset.note == key){
                    key_obj = k;
                    break;
                }
            }
            if (key_obj){
                keyColor = key_obj.matches(".white") ? "white" : "black"
                if     (keyColor=="white" && keyState=="up"  ){key_obj.style.backgroundColor = "#CBCBCB"}
                else if(keyColor=="white" && keyState=="down"){key_obj.style.backgroundColor = "#BBBBDD"}
                else if(keyColor=="white" && keyState=="harm"){key_obj.style.backgroundColor = "#BBDDBB"}
                else if(keyColor=="black" && keyState=="up"  ){key_obj.style.backgroundColor = "#222222"}
                else if(keyColor=="black" && keyState=="down"){key_obj.style.backgroundColor = "#666699"}
                else if(keyColor=="black" && keyState=="harm"){key_obj.style.backgroundColor = "#669966"}
            }
        } 

        function create_harmony(r,n){
            let root_val = conversion.indexOf(r);
            let _h = harmonies[n];

            let h_1 = conversion[root_val + _h[0]];
            let h_2 = conversion[root_val + _h[1]];
            let h_3 = conversion[root_val + _h[2]];
            return [r, h_1, h_2, h_3];
        }

        // Key Pressed/Released Callbacks
        function change_harm(n){
            synth.triggerRelease(notes, undefined)
            update_KeyColor(notes[0], "up");
            update_KeyColor(notes[1], "up");
            update_KeyColor(notes[2], "up");
            update_KeyColor(notes[3], "up");
            notes = create_harmony(root, n);
            update_KeyColor(notes[0], "down");
            update_KeyColor(notes[1], "harm");
            update_KeyColor(notes[2], "harm");
            update_KeyColor(notes[3], "harm");
            synth.triggerAttack(notes, undefined, 1)
        }
        function play_Note(key){
            if (prev_note){
                release_Note(prev_note);
            }
            prev_note = key;
            root = key.dataset.note
            notes = create_harmony(root, 0);
            document.getElementById('notes').innerHTML = notes;
            synth.triggerAttack(notes, undefined, 1)
            update_KeyColor(key.dataset.note, "down");
            update_KeyColor(notes[1], "harm");
            update_KeyColor(notes[2], "harm");
            update_KeyColor(notes[3], "harm");
        }
        function release_Note(key){
            synth.triggerRelease(notes, undefined)
            document.getElementById('notes').innerHTML = "";
            
            update_KeyColor(key.dataset.note, "up");
            update_KeyColor(notes[1], "up");
            update_KeyColor(notes[2], "up");
            update_KeyColor(notes[3], "up");
            notes = [];
        }
                                            
        // Hook Key Callbacks to Mouse/Touch Events
        var keyboard = document.getElementById("keyboard")
        for(let key of keyboard.children){
            key.addEventListener("mousedown",  function(){play_Note(key)                 })
            key.addEventListener("touchstart", function(){play_Note(key)                 })
            key.addEventListener("touchend",   function(){release_Note(key)              })
        }
        
    </script>
</body>
</html>